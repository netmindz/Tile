--- a/ESP8266_Rings/Spiralight.h
+++ b/ESP8266_Rings/Spiralight.h
@@ -512,26 +512,26 @@ void do_Pulse_MC() {
     }
     colorIndex = startIndex;
     for ( int i = 0; i < RING_1_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 1;  //how fast to advance through palette  3
     }
     colorIndex = startIndex;
     for ( int i = RING_1_END; i < RING_2_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 42;  //how fast to advance through palette  3
     }
     for ( int i = RING_2_END; i < RING_3_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 21;  //how fast to advance through palette  3
     }
 
     for ( int i = RING_3_END; i < RING_4_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 14;  //how fast to advance through palette  3
     }
     colorIndex = startIndex;
     for ( int i = RING_4_END; i < RING_5_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 11;  //how fast to advance through palette  3
     }
     FastLED.show();
(1/21) Stage this hunk [y,n,q,a,d,j,J,g,/,s,e,?]? y
@@ -1173,7 +1173,7 @@ void do_Bounce_Linear_MC() {
 
   }
 }
-void do_Bounce_Linear_Rainbow() {
+void do_Bounce_Linear() {
   int Bouncespeed = 15;
   if (millis() - mil >= map(anispeed, 0, 100, 120, 30)) { // speedy
     mil = millis();
(2/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1185,14 +1185,14 @@ void do_Bounce_Linear_Rainbow() {
         Bouncephase = 2;
       }
       if (50 <= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(3/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1200,7 +1200,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(4/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1208,7 +1208,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(5/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1216,7 +1216,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(6/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1230,14 +1230,14 @@ void do_Bounce_Linear_Rainbow() {
       }
 
       if (50 <= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(7/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1245,7 +1245,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(8/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1253,7 +1253,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(9/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1261,7 +1261,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(10/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1274,14 +1274,14 @@ void do_Bounce_Linear_Rainbow() {
         Bouncephase = 4;
       }
       if (50 >= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
       
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(11/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1289,7 +1289,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(12/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1297,7 +1297,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(13/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1305,7 +1305,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(14/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1315,14 +1315,14 @@ void do_Bounce_Linear_Rainbow() {
       Bouncepos += Bouncespeed;
 
       if (50 >= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(15/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1330,7 +1330,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(16/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1338,7 +1338,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(17/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1346,7 +1346,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(18/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1363,195 +1363,7 @@ void do_Bounce_Linear_Rainbow() {
   }
 }
 
-void do_Bounce_Linear_Static() {
-  int Bouncespeed = 15;
-  if (millis() - mil >= map(anispeed, 0, 100, 120, 30)) { // speedy
-    mil = millis();
-
-    if (Bouncephase == 1) {
-      Bouncepos += Bouncespeed;
-      if (Bouncepos >= 120) {
-        Bouncepos = 100;
-        Bouncephase = 2;
-      }
-      if (50 <= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-    }
-
-    if (Bouncephase == 2) {
-      Bouncepos -= Bouncespeed;
-      if (Bouncepos <= -20) {
-        Bouncepos = 100;
-        Bouncephase = 3;
-      }
-
-      if (50 <= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-    }
-    if (Bouncephase == 3) {
-      Bouncepos -= Bouncespeed;
-      if (Bouncepos <= -20) {
-        Bouncepos = 0;
-        Bouncephase = 4;
-      }
-      if (50 >= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-    }
-
-    if (Bouncephase == 4) {
-      Bouncepos += Bouncespeed;
 
-      if (50 >= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      if (Bouncepos >= 120) {
-        Bouncepos = 0;
-        Bouncephase = 1;
-        FastLED.clear();
-        FastLED.show();
-      }
-    }
-
-    FastLED.show();
-
-  }
-}
 void do_Visor_MC() {

