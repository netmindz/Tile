diff --git a/ESP8266_Rings/Clock.h b/ESP8266_Rings/Clock.h
index dd61ed7..4896d69 100644
--- a/ESP8266_Rings/Clock.h
+++ b/ESP8266_Rings/Clock.h
@@ -78,7 +78,6 @@ void updateClock()
 void handClock()
 {
 //  dimAll(240);
-   fill_solid(leds, NUM_LEDS, CRGB::Black);
 
   // hour
   drawHand(hourAngle, 4, CRGB::Red);
(1/5) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? y
@@ -95,7 +94,6 @@ void handClock()
 void arcClock()
 {
   EVERY_N_SECONDS( 1 ) { 
-    fill_solid(leds, NUM_LEDS, CRGB::Black);
   
     // hour
     drawHandArc(hourAngle, 6, CRGB::Red);
(2/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -109,6 +107,7 @@ void arcClock()
     updateClock();
 
     FastLED.show();
+    fill_solid(leds, NUM_LEDS, CRGB::Black);
   }
 }
 
(3/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -116,7 +115,6 @@ void rimClock()
 {
   EVERY_N_SECONDS( 1 ) { 
   //  dimAll(240);
-     fill_solid(leds, NUM_LEDS, CRGB::Black);
   
     // hour
     drawHandDot(hourAngle, 8, CRGB::Red);
(4/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -130,5 +128,6 @@ void rimClock()
     updateClock();
 
     FastLED.show();
+    fill_solid(leds, NUM_LEDS, CRGB::Black);
   }
 }
(5/5) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? y

diff --git a/ESP8266_Rings/Disk.h b/ESP8266_Rings/Disk.h
index cb0bf89..3b82ec5 100644
--- a/ESP8266_Rings/Disk.h
+++ b/ESP8266_Rings/Disk.h
@@ -8,15 +8,15 @@
 //This is where all the magic happens.
 //Each represents one of the concentric rings.
 uint8_t rings[ringCount][2] = {
-  {240, 240},   //0 Center Point
-  {232, 239},   //1
-  {220, 231},   //2
-  {204, 219},   //3
-  {180, 203},   //4
-  {148, 179},   //5
-  {108, 147},   //6
-  {60, 107},    //7
-  {0, 59},      //8 Outer Ring
+  {0, 0},     //0 Center Point
+  {1, 8},     //1
+  {9, 20},   //2
+  {21, 36},   //3
+  {37, 60},   //4
+  {61, 92},   //5
+  {93, 132},  //6
+  {133, 180}, //7
+  {181, 240}, //8 Outer Ring
 };
 
 //For convenience, last ring index
(1/5) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? y
@@ -113,26 +113,21 @@ void fillRing360(uint8_t ring, CRGB color, int16_t startAngle, int16_t endAngle)
   uint8_t end = angleToPixel360(endAngle, ring);
   if (start > end)
   {
-    for (int i = start; i <= rings[ring][1]; i++)
-    {
+    for (int i = start; i <= rings[ring][1]; i++) {
       leds[i] = color;
     }
-    for (int i = rings[ring][0]; i <= end; i++)
-    {
+    for (int i = rings[ring][0]; i <= end; i++) {
       leds[i] = color;
     }
   }
   else if (start == end)
   {
-    for (int i = rings[ring][0]; i <= rings[ring][1]; i++)
-    {
+    for (int i = rings[ring][0]; i <= rings[ring][1]; i++) {
       leds[i] = color;
     }
   }
-  else
-  {
-    for (int i = start; i <= end; i++)
-    {
+  else {
+    for (int i = start; i <= end; i++) {
       leds[i] = color;
     }
   }
(2/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? n
@@ -206,7 +201,7 @@ uint8_t chaseRadiusLine256() {
   return 4;
 }
 
-uint8_t halfCircleRainbow360() {
+void halfCircleRainbow360() {
   static int angle360 = 0;
   FastLED.clear();
   fillRing360(8, CRGB::Red, angle360 - 90, angle360 + 90);
(3/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -218,10 +213,11 @@ uint8_t halfCircleRainbow360() {
   angle360++;
   if (angle360 >= 360)
     angle360 = 0;
-  return 4;
+//  return 4;
+  FastLED.delay(0);
 }
 
-uint8_t halfCircleRainbow256() {
+void halfCircleRainbow256() {
   static uint8_t angle256 = 0;
   FastLED.clear();
   fillRing256(8, CRGB::Purple, angle256 - 64, angle256 + 64);
(4/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -231,5 +227,6 @@ uint8_t halfCircleRainbow256() {
   fillRing256(4, CRGB::Orange, angle256 - 64, angle256 + 64);
   fillRing256(3, CRGB::Red, angle256 - 64, angle256 + 64);
   angle256++;
-  return 4;
+  FastLED.delay(0);
+//  return 4;
 }
(5/5) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? y

diff --git a/ESP8266_Rings/ESP8266_Rings.ino b/ESP8266_Rings/ESP8266_Rings.ino
index a2a10a1..eea7e78 100644
--- a/ESP8266_Rings/ESP8266_Rings.ino
+++ b/ESP8266_Rings/ESP8266_Rings.ino
@@ -74,8 +74,10 @@ void audioRings();
 
 PatternAndNameList gPatterns = {
   { autoRun, "autoRun"}, // must be first
-  { arcClock, "arcClock" },
+  { halfCircleRainbow360, "halfCircleRainbow360" },
+  { halfCircleRainbow256, "halfCircleRainbow256" },
   { rimClock, "rimClock" },
+  { arcClock, "arcClock" },
   { audioRings, "audioRings"},
   { F_lying_circular, "Flying Circular" },
   { ringsx, "ringsx"},
(1/6) Stage this hunk [y,n,q,a,d,j,J,g,/,s,e,?]? y
@@ -83,14 +85,14 @@ PatternAndNameList gPatterns = {
   { randomFlow, "randomFlow" },
   { do_Spiral_Rainbow_Wave_1, "Spiral_Rainbow_Wave_1"},
   { do_Spiral_Rainbow_Wave_2, "Spiral_Rainbow_Wave_2"},
-//  { do_Spiral_Rainbow_Wave_3, "Spiral_Rainbow_Wave_3"},
+//  { do_Spiral_Rainbow_Wave_3, " _3"},
   { do_Spiral_MC_Wave_1, "Spiral_MC_Wave_1"},
   { do_Spiral_MC_Wave_2, "Spiral_MC_Wave_2"},
 //  { do_Spiral_MC_Wave_3, "Spiral_MC_Wave_3"},
   { do_Linear_Rainbow_Gradient_1, "Linear_Rainbow_Gradient_1"},
 //  { do_Linear_Rainbow_Gradient_2, "Linear_Rainbow_Gradient_2"},
   { do_Linear_Rainbow_Gradient_3, "Linear_Rainbow_Gradient_3"},
-  { do_Linear_MC_Gradient_1, "Linear_MC_Gradient_1"},
+  { do_Linear_Gradient_1, "Linear_Gradient_1"},
 //  { do_Linear_MC_Gradient_2, "Linear_MC_Gradient_2"},
   { do_Linear_MC_Gradient_3, "Linear_MC_Gradient_3"},
 //  { do_Indiv_Jump_Rainbow, "Indiv_Jump_Rainbow"},
(2/6) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -104,7 +106,7 @@ PatternAndNameList gPatterns = {
 //  { do_Marquee_Static, "Marquee_Static"},
   { do_Segment_Rainbow, "Segment_Rainbow"},
   { do_Segment_MC, "Segment_MC"},
-  { do_Segment_Static, "Segment_Static"},
+//  { do_Segment_Static, "Segment_Static"},
   { do_Visor_MC, "Visor_MC"},
   { do_Visor_Rainbow, "Visor_Rainbow"}, 
 //  { do_Visor_Static, "Visor_Static"},
(3/6) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -112,20 +114,19 @@ PatternAndNameList gPatterns = {
 //  { do_Bounce_Spiral_Static, "Bounce_Spiral_Static"},
   { do_Bounce_Spiral_Rainbow, "Bounce_Spiral_Rainbow"},
   { do_Bounce_Spiral_MC, "Bounce_Spiral_MC"},
-  { do_Bounce_Linear_Rainbow, "Bounce_Linear_Rainbow"},
-//  { do_Bounce_Linear_Static, "Bounce_Linear_Static"},
+  { do_Bounce_Linear, "Bounce_Linear"},
   { do_Ripple_Rainbow, "Ripple_Rainbow"},
   { do_Ripple_MC, "Ripple_MC"},
 //  { do_Ripple_Static, "Ripple_Static"},
   { do_Pulse_Rainbow, "Pulse_Rainbow"},
-  { do_Pulse_MC, "Pulse_MC"},
+//  { do_Pulse_MC, "Pulse_MC"},
 //  { do_Pulse_Static, "Pulse_Static"},
   { do_Rain_Rainbow, "Rain_Rainbow"},
   { do_Rain_MC, "Rain_MC"},
 //  { do_Rain_Static, "Rain_Static"},
 //  { do_Special_Xmas, "Special_Xmas"},
 //  { do_Special_Special, "Special_Special"},
-  { do_Sparkle, "Sparkle"},
+//  { do_Sparkle, "Sparkle"},
   { do_Shift_MC, "Shift_MC"},
   { do_Shift_Rainbow, "Shift_Rainbow"},
 
(4/6) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -261,12 +262,7 @@ void loop() {
     pgm = getValue(packet, 6,  0, gPatternCount);
   }
   EVERY_N_SECONDS( 10 ) {
-    Serial.printf("BRIGHTNESS = %u   JUMP = %u   SPEED = %u", BRIGHTNESS, JUMP, SPEED);
-
-    Serial.print("  INWARD = ");
-    Serial.print(INWARD);
-
-    Serial.println();
+    Serial.printf("BRIGHTNESS = %u   JUMP = %u   SPEED = %u   INWARD = %b\n", BRIGHTNESS, JUMP, SPEED, INWARD);
   }
   readAudioUDP();
   EVERY_N_SECONDS(10) {
(5/6) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? n
@@ -285,8 +281,8 @@ void loop() {
 void autoRun() {
   
   EVERY_N_SECONDS(90) {
-    // autopgm = random(1, (gPatternCount - 1));
-    autopgm++;
+    autopgm = random(1, (gPatternCount - 1));
+    // autopgm++;
     if (autopgm >= gPatternCount) autopgm = 1;
     Serial.print("Next Auto pattern: ");
     Serial.println(gPatterns[autopgm].name);
(6/6) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? n

diff --git a/ESP8266_Rings/Spiralight.h b/ESP8266_Rings/Spiralight.h
index 36ad53c..120cda8 100644
--- a/ESP8266_Rings/Spiralight.h
+++ b/ESP8266_Rings/Spiralight.h
@@ -512,26 +512,26 @@ void do_Pulse_MC() {
     }
     colorIndex = startIndex;
     for ( int i = 0; i < RING_1_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 1;  //how fast to advance through palette  3
     }
     colorIndex = startIndex;
     for ( int i = RING_1_END; i < RING_2_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 42;  //how fast to advance through palette  3
     }
     for ( int i = RING_2_END; i < RING_3_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 21;  //how fast to advance through palette  3
     }
 
     for ( int i = RING_3_END; i < RING_4_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 14;  //how fast to advance through palette  3
     }
     colorIndex = startIndex;
     for ( int i = RING_4_END; i < RING_5_END; i++) {
-      leds[i] = ColorFromPalette( MC_p, colorIndex, 255, LINEARBLEND);
+      leds[i] = ColorFromPalette( currentPalette, colorIndex, 255, LINEARBLEND);
       colorIndex = colorIndex + 11;  //how fast to advance through palette  3
     }
     FastLED.show();
(1/21) Stage this hunk [y,n,q,a,d,j,J,g,/,s,e,?]? y
@@ -1173,7 +1173,7 @@ void do_Bounce_Linear_MC() {
 
   }
 }
-void do_Bounce_Linear_Rainbow() {
+void do_Bounce_Linear() {
   int Bouncespeed = 15;
   if (millis() - mil >= map(anispeed, 0, 100, 120, 30)) { // speedy
     mil = millis();
(2/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1185,14 +1185,14 @@ void do_Bounce_Linear_Rainbow() {
         Bouncephase = 2;
       }
       if (50 <= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(3/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1200,7 +1200,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(4/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1208,7 +1208,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(5/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1216,7 +1216,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(6/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1230,14 +1230,14 @@ void do_Bounce_Linear_Rainbow() {
       }
 
       if (50 <= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(7/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1245,7 +1245,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(8/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1253,7 +1253,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(9/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1261,7 +1261,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val <= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(10/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1274,14 +1274,14 @@ void do_Bounce_Linear_Rainbow() {
         Bouncephase = 4;
       }
       if (50 >= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
       
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(11/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1289,7 +1289,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(12/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1297,7 +1297,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(13/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1305,7 +1305,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(14/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1315,14 +1315,14 @@ void do_Bounce_Linear_Rainbow() {
       Bouncepos += Bouncespeed;
 
       if (50 >= Bouncepos)
-        leds[0] = ColorFromPalette( RainbowColors_p, 128, 255, LINEARBLEND);
+        leds[0] = ColorFromPalette( currentPalette, 128, 255, LINEARBLEND);
       else
         leds[0] = CRGB::Black;
 
       for ( int i = RING_1_END; i < RING_2_END; i++) {
         float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(15/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? y
@@ -1330,7 +1330,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_2_END; i < RING_3_END; i++) {
         float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(16/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1338,7 +1338,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_3_END; i < RING_4_END; i++) {
         float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(17/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1346,7 +1346,7 @@ void do_Bounce_Linear_Rainbow() {
       for ( int i = RING_4_END; i < RING_5_END; i++) {
         float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
         if (val >= Bouncepos)
-          leds[i] = ColorFromPalette( RainbowColors_p, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
+          leds[i] = ColorFromPalette( currentPalette, map(val, 0, 100, 0, 255), 255, LINEARBLEND);
         else
           leds[i] = CRGB::Black;
       }
(18/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -1363,195 +1363,7 @@ void do_Bounce_Linear_Rainbow() {
   }
 }
 
-void do_Bounce_Linear_Static() {
-  int Bouncespeed = 15;
-  if (millis() - mil >= map(anispeed, 0, 100, 120, 30)) { // speedy
-    mil = millis();
-
-    if (Bouncephase == 1) {
-      Bouncepos += Bouncespeed;
-      if (Bouncepos >= 120) {
-        Bouncepos = 100;
-        Bouncephase = 2;
-      }
-      if (50 <= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-    }
-
-    if (Bouncephase == 2) {
-      Bouncepos -= Bouncespeed;
-      if (Bouncepos <= -20) {
-        Bouncepos = 100;
-        Bouncephase = 3;
-      }
-
-      if (50 <= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val <= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-    }
-    if (Bouncephase == 3) {
-      Bouncepos -= Bouncespeed;
-      if (Bouncepos <= -20) {
-        Bouncepos = 0;
-        Bouncephase = 4;
-      }
-      if (50 >= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-      
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-    }
-
-    if (Bouncephase == 4) {
-      Bouncepos += Bouncespeed;
 
-      if (50 >= Bouncepos)
-        leds[0] = CRGB(static_r, static_g, static_b);
-      else
-        leds[0] = CRGB::Black;
-
-      for ( int i = RING_1_END; i < RING_2_END; i++) {
-        float val = (((3 * cos(((90 + ((i - 1) * (360.0 / 6.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_2_END; i < RING_3_END; i++) {
-        float val = (((6 * cos(((90 + ((i - 7) * (360.0 / 12.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-
-      for ( int i = RING_3_END; i < RING_4_END; i++) {
-        float val = (((9 * cos(((90 + ((i - 19) * (360.0 / 18.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      
-      for ( int i = RING_4_END; i < RING_5_END; i++) {
-        float val = (((12 * cos(((90 + ((i - 37) * (360.0 / 24.0))) * 71) / 4068 )) + 12) * 100) / 24   ;
-        if (val >= Bouncepos)
-          leds[i] = CRGB(static_r, static_g, static_b);
-        else
-          leds[i] = CRGB::Black;
-      }
-      if (Bouncepos >= 120) {
-        Bouncepos = 0;
-        Bouncephase = 1;
-        FastLED.clear();
-        FastLED.show();
-      }
-    }
-
-    FastLED.show();
-
-  }
-}
 void do_Visor_MC() {
   int vislength = 2;
   if (millis() - mil >= map(anispeed, 0, 100, 200, 20)) {
(19/21) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? ^C
[will@wjtwxps ESP8266_Rings](master*)$ git status .
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	modified:   Clock.h
	modified:   Disk.h
	modified:   ESP8266_Rings.ino

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   Disk.h
	modified:   ESP8266_Rings.ino
	modified:   Spiralight.h

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	Map.h
	discostrobe.h

[will@wjtwxps ESP8266_Rings](master*)$ git restore -- .
[will@wjtwxps ESP8266_Rings](master*)$ git restore --staged .
[will@wjtwxps ESP8266_Rings](master*)$ git add -p .
diff --git a/ESP8266_Rings/Clock.h b/ESP8266_Rings/Clock.h
index dd61ed7..4896d69 100644
--- a/ESP8266_Rings/Clock.h
+++ b/ESP8266_Rings/Clock.h
@@ -78,7 +78,6 @@ void updateClock()
 void handClock()
 {
 //  dimAll(240);
-   fill_solid(leds, NUM_LEDS, CRGB::Black);
 
   // hour
   drawHand(hourAngle, 4, CRGB::Red);
(1/5) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? y
@@ -95,7 +94,6 @@ void handClock()
 void arcClock()
 {
   EVERY_N_SECONDS( 1 ) { 
-    fill_solid(leds, NUM_LEDS, CRGB::Black);
   
     // hour
     drawHandArc(hourAngle, 6, CRGB::Red);
(2/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -109,6 +107,7 @@ void arcClock()
     updateClock();
 
     FastLED.show();
+    fill_solid(leds, NUM_LEDS, CRGB::Black);
   }
 }
 
(3/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -116,7 +115,6 @@ void rimClock()
 {
   EVERY_N_SECONDS( 1 ) { 
   //  dimAll(240);
-     fill_solid(leds, NUM_LEDS, CRGB::Black);
   
     // hour
     drawHandDot(hourAngle, 8, CRGB::Red);
(4/5) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? y
@@ -130,5 +128,6 @@ void rimClock()
     updateClock();
 
     FastLED.show();
+    fill_solid(leds, NUM_LEDS, CRGB::Black);
   }
 }
(5/5) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? y

diff --git a/ESP8266_Rings/Disk.h b/ESP8266_Rings/Disk.h
index cb0bf89..11b801d 100644
--- a/ESP8266_Rings/Disk.h
+++ b/ESP8266_Rings/Disk.h
@@ -8,15 +8,15 @@
 //This is where all the magic happens.
 //Each represents one of the concentric rings.
 uint8_t rings[ringCount][2] = {
-  {240, 240},   //0 Center Point
-  {232, 239},   //1
-  {220, 231},   //2
-  {204, 219},   //3
-  {180, 203},   //4
-  {148, 179},   //5
-  {108, 147},   //6
-  {60, 107},    //7
-  {0, 59},      //8 Outer Ring
+  {0, 0},     //0 Center Point
+  {1, 8},     //1
+  {9, 20},   //2
+  {21, 36},   //3
+  {37, 60},   //4
+  {61, 92},   //5
+  {93, 132},  //6
+  {133, 180}, //7
+  {181, 240}, //8 Outer Ring
 };
 
 //For convenience, last ring index
(1/4) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? n
@@ -206,7 +206,7 @@ uint8_t chaseRadiusLine256() {
   return 4;
 }
 
-uint8_t halfCircleRainbow360() {
+void halfCircleRainbow360() {
   static int angle360 = 0;
   FastLED.clear();
   fillRing360(8, CRGB::Red, angle360 - 90, angle360 + 90);
(2/4) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? n
@@ -218,10 +218,11 @@ uint8_t halfCircleRainbow360() {
   angle360++;
   if (angle360 >= 360)
     angle360 = 0;
-  return 4;
+//  return 4;
+  FastLED.delay(0);
 }
 
-uint8_t halfCircleRainbow256() {
+void halfCircleRainbow256() {
   static uint8_t angle256 = 0;
   FastLED.clear();
   fillRing256(8, CRGB::Purple, angle256 - 64, angle256 + 64);
(3/4) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? n
@@ -231,5 +232,6 @@ uint8_t halfCircleRainbow256() {
   fillRing256(4, CRGB::Orange, angle256 - 64, angle256 + 64);
   fillRing256(3, CRGB::Red, angle256 - 64, angle256 + 64);
   angle256++;
-  return 4;
+  FastLED.delay(0);
+//  return 4;
 }
(4/4) Stage this hunk [y,n,q,a,d,K,g,/,e,?]? n

diff --git a/ESP8266_Rings/ESP8266_Rings.ino b/ESP8266_Rings/ESP8266_Rings.ino
index a2a10a1..671dd54 100644
--- a/ESP8266_Rings/ESP8266_Rings.ino
+++ b/ESP8266_Rings/ESP8266_Rings.ino
@@ -74,8 +74,10 @@ void audioRings();
 
 PatternAndNameList gPatterns = {
   { autoRun, "autoRun"}, // must be first
-  { arcClock, "arcClock" },
+  { halfCircleRainbow360, "halfCircleRainbow360" },
+  { halfCircleRainbow256, "halfCircleRainbow256" },
   { rimClock, "rimClock" },
+  { arcClock, "arcClock" },
   { audioRings, "audioRings"},
   { F_lying_circular, "Flying Circular" },
   { ringsx, "ringsx"},
(1/4) Stage this hunk [y,n,q,a,d,j,J,g,/,s,e,?]? n
@@ -83,14 +85,14 @@ PatternAndNameList gPatterns = {
   { randomFlow, "randomFlow" },
   { do_Spiral_Rainbow_Wave_1, "Spiral_Rainbow_Wave_1"},
   { do_Spiral_Rainbow_Wave_2, "Spiral_Rainbow_Wave_2"},
-//  { do_Spiral_Rainbow_Wave_3, "Spiral_Rainbow_Wave_3"},
+//  { do_Spiral_Rainbow_Wave_3, " _3"},
   { do_Spiral_MC_Wave_1, "Spiral_MC_Wave_1"},
   { do_Spiral_MC_Wave_2, "Spiral_MC_Wave_2"},
 //  { do_Spiral_MC_Wave_3, "Spiral_MC_Wave_3"},
   { do_Linear_Rainbow_Gradient_1, "Linear_Rainbow_Gradient_1"},
 //  { do_Linear_Rainbow_Gradient_2, "Linear_Rainbow_Gradient_2"},
   { do_Linear_Rainbow_Gradient_3, "Linear_Rainbow_Gradient_3"},
-  { do_Linear_MC_Gradient_1, "Linear_MC_Gradient_1"},
+  { do_Linear_Gradient_1, "Linear_Gradient_1"},
 //  { do_Linear_MC_Gradient_2, "Linear_MC_Gradient_2"},
   { do_Linear_MC_Gradient_3, "Linear_MC_Gradient_3"},
 //  { do_Indiv_Jump_Rainbow, "Indiv_Jump_Rainbow"},
(2/4) Stage this hunk [y,n,q,a,d,K,j,J,g,/,s,e,?]? n
@@ -104,7 +106,7 @@ PatternAndNameList gPatterns = {
 //  { do_Marquee_Static, "Marquee_Static"},
   { do_Segment_Rainbow, "Segment_Rainbow"},
   { do_Segment_MC, "Segment_MC"},
-  { do_Segment_Static, "Segment_Static"},
+//  { do_Segment_Static, "Segment_Static"},
   { do_Visor_MC, "Visor_MC"},
   { do_Visor_Rainbow, "Visor_Rainbow"}, 
 //  { do_Visor_Static, "Visor_Static"},
(3/4) Stage this hunk [y,n,q,a,d,K,j,J,g,/,e,?]? n
@@ -112,20 +114,19 @@ PatternAndNameList gPatterns = {
 //  { do_Bounce_Spiral_Static, "Bounce_Spiral_Static"},
   { do_Bounce_Spiral_Rainbow, "Bounce_Spiral_Rainbow"},
   { do_Bounce_Spiral_MC, "Bounce_Spiral_MC"},
-  { do_Bounce_Linear_Rainbow, "Bounce_Linear_Rainbow"},
-//  { do_Bounce_Linear_Static, "Bounce_Linear_Static"},
+  { do_Bounce_Linear, "Bounce_Linear"},
   { do_Ripple_Rainbow, "Ripple_Rainbow"},
   { do_Ripple_MC, "Ripple_MC"},
 //  { do_Ripple_Static, "Ripple_Static"},
   { do_Pulse_Rainbow, "Pulse_Rainbow"},
-  { do_Pulse_MC, "Pulse_MC"},
+//  { do_Pulse_MC, "Pulse_MC"},
 //  { do_Pulse_Static, "Pulse_Static"},
   { do_Rain_Rainbow, "Rain_Rainbow"},
   { do_Rain_MC, "Rain_MC"},
 //  { do_Rain_Static, "Rain_Static"},
 //  { do_Special_Xmas, "Special_Xmas"},
 //  { do_Special_Special, "Special_Special"},
-  { do_Sparkle, "Sparkle"},
+//  { do_Sparkle, "Sparkle"},
   { do_Shift_MC, "Shift_MC"},
   { do_Shift_Rainbow, "Shift_Rainbow"},
 

